\ Model minimizecost
\ LP format - for model browsing. Use MPS format to capture full model detail.
Minimize
  0 tuplex[EV1,a,p] + 0 tuplex[EV1,b,p] + 0 tuplex[EV1,c,p]
   + 0 tuplex[EV2,a,p] + 0 tuplex[EV2,b,p] + 0 tuplex[EV2,c,p]
   + 0 Market_cost[0] + 0 Market_cost[1] + 0 Market_cost[2]
   + 0 Market_cost[3] + 0 Market_cost[4] + 0 Market_cost[5]
   + 0 Market_cost[6] + 0 Market_cost[7] + 0 Market_cost[8]
   + 0 Market_cost[9] + Totcost + 0 maxvar[0] + 0 maxvar[1] + 0 maxvar[2]
   + 0 maxvar[3] + 0 maxvar[4] + 0 maxvar[5] + 0 maxvar[6] + 0 maxvar[7]
   + 0 maxvar[8] + 0 maxvar[9] + 0 Power_in_a[0,0] + 0 Power_in_a[0,1]
   + 0 Power_in_a[0,2] + 0 Power_in_a[0,3] + 0 Power_in_a[0,4]
   + 0 Power_in_a[0,5] + 0 Power_in_a[0,6] + 0 Power_in_a[0,7]
   + 0 Power_in_a[0,8] + 0 Power_in_a[0,9] + 0 Power_in_a[1,0]
   + 0 Power_in_a[1,1] + 0 Power_in_a[1,2] + 0 Power_in_a[1,3]
   + 0 Power_in_a[1,4] + 0 Power_in_a[1,5] + 0 Power_in_a[1,6]
   + 0 Power_in_a[1,7] + 0 Power_in_a[1,8] + 0 Power_in_a[1,9]
   + 0 Power_in_b[0,0] + 0 Power_in_b[0,1] + 0 Power_in_b[0,2]
   + 0 Power_in_b[0,3] + 0 Power_in_b[0,4] + 0 Power_in_b[0,5]
   + 0 Power_in_b[0,6] + 0 Power_in_b[0,7] + 0 Power_in_b[0,8]
   + 0 Power_in_b[0,9] + 0 Power_in_b[1,0] + 0 Power_in_b[1,1]
   + 0 Power_in_b[1,2] + 0 Power_in_b[1,3] + 0 Power_in_b[1,4]
   + 0 Power_in_b[1,5] + 0 Power_in_b[1,6] + 0 Power_in_b[1,7]
   + 0 Power_in_b[1,8] + 0 Power_in_b[1,9] + 0 Power_in_c[0,0]
   + 0 Power_in_c[0,1] + 0 Power_in_c[0,2] + 0 Power_in_c[0,3]
   + 0 Power_in_c[0,4] + 0 Power_in_c[0,5] + 0 Power_in_c[0,6]
   + 0 Power_in_c[0,7] + 0 Power_in_c[0,8] + 0 Power_in_c[0,9]
   + 0 Power_in_c[1,0] + 0 Power_in_c[1,1] + 0 Power_in_c[1,2]
   + 0 Power_in_c[1,3] + 0 Power_in_c[1,4] + 0 Power_in_c[1,5]
   + 0 Power_in_c[1,6] + 0 Power_in_c[1,7] + 0 Power_in_c[1,8]
   + 0 Power_in_c[1,9]
Subject To
 phase_constraint: a1[0,0] + b1[0,0] + c1[0,0] = 1
 phase_constraint: a1[0,1] + b1[0,1] + c1[0,1] = 1
 phase_constraint: a1[0,2] + b1[0,2] + c1[0,2] = 1
 phase_constraint: a1[0,3] + b1[0,3] + c1[0,3] = 1
 phase_constraint: a1[0,4] + b1[0,4] + c1[0,4] = 1
 phase_constraint: a1[0,5] + b1[0,5] + c1[0,5] = 1
 phase_constraint: a1[0,6] + b1[0,6] + c1[0,6] = 1
 phase_constraint: a1[0,7] + b1[0,7] + c1[0,7] = 1
 phase_constraint: a1[0,8] + b1[0,8] + c1[0,8] = 1
 phase_constraint: a1[0,9] + b1[0,9] + c1[0,9] = 1
 phase_constraint: a1[1,0] + b1[1,0] + c1[1,0] = 1
 phase_constraint: a1[1,1] + b1[1,1] + c1[1,1] = 1
 phase_constraint: a1[1,2] + b1[1,2] + c1[1,2] = 1
 phase_constraint: a1[1,3] + b1[1,3] + c1[1,3] = 1
 phase_constraint: a1[1,4] + b1[1,4] + c1[1,4] = 1
 phase_constraint: a1[1,5] + b1[1,5] + c1[1,5] = 1
 phase_constraint: a1[1,6] + b1[1,6] + c1[1,6] = 1
 phase_constraint: a1[1,7] + b1[1,7] + c1[1,7] = 1
 phase_constraint: a1[1,8] + b1[1,8] + c1[1,8] = 1
 phase_constraint: a1[1,9] + b1[1,9] + c1[1,9] = 1
 User_constraint: 14.25 Power[0,1] + 14.25 Power[0,2] + 14.25 Power[0,3]
   + 14.25 Power[0,4] + 14.25 Power[0,5] + Energy[0] = 70
 User_constraint: 14.25 Power[1,4] + 14.25 Power[1,5] + 14.25 Power[1,6]
   + 14.25 Power[1,7] + 14.25 Power[1,8] + 14.25 Power[1,9] + Energy[1]
   = 40
 Power_A_B_constraint: [ a1[0,0] * Power[0,0] + a1[1,0] * Power[1,0]
   - b1[0,0] * Power[0,0] - b1[1,0] * Power[1,0] ] <= 4.6
 Power_B_C_constraint: [ b1[0,0] * Power[0,0] + b1[1,0] * Power[1,0]
   - c1[0,0] * Power[0,0] - c1[1,0] * Power[1,0] ] <= 4.6
 Power_C_A_constraint: [ - a1[0,0] * Power[0,0] - a1[1,0] * Power[1,0]
   + c1[0,0] * Power[0,0] + c1[1,0] * Power[1,0] ] <= 4.6
 Power_A_B_constraint: [ a1[0,1] * Power[0,1] + a1[1,1] * Power[1,1]
   - b1[0,1] * Power[0,1] - b1[1,1] * Power[1,1] ] <= 4.6
 Power_B_C_constraint: [ b1[0,1] * Power[0,1] + b1[1,1] * Power[1,1]
   - c1[0,1] * Power[0,1] - c1[1,1] * Power[1,1] ] <= 4.6
 Power_C_A_constraint: [ - a1[0,1] * Power[0,1] - a1[1,1] * Power[1,1]
   + c1[0,1] * Power[0,1] + c1[1,1] * Power[1,1] ] <= 4.6
 Power_A_B_constraint: [ a1[0,2] * Power[0,2] + a1[1,2] * Power[1,2]
   - b1[0,2] * Power[0,2] - b1[1,2] * Power[1,2] ] <= 4.6
 Power_B_C_constraint: [ b1[0,2] * Power[0,2] + b1[1,2] * Power[1,2]
   - c1[0,2] * Power[0,2] - c1[1,2] * Power[1,2] ] <= 4.6
 Power_C_A_constraint: [ - a1[0,2] * Power[0,2] - a1[1,2] * Power[1,2]
   + c1[0,2] * Power[0,2] + c1[1,2] * Power[1,2] ] <= 4.6
 Power_A_B_constraint: [ a1[0,3] * Power[0,3] + a1[1,3] * Power[1,3]
   - b1[0,3] * Power[0,3] - b1[1,3] * Power[1,3] ] <= 4.6
 Power_B_C_constraint: [ b1[0,3] * Power[0,3] + b1[1,3] * Power[1,3]
   - c1[0,3] * Power[0,3] - c1[1,3] * Power[1,3] ] <= 4.6
 Power_C_A_constraint: [ - a1[0,3] * Power[0,3] - a1[1,3] * Power[1,3]
   + c1[0,3] * Power[0,3] + c1[1,3] * Power[1,3] ] <= 4.6
 Power_A_B_constraint: [ a1[0,4] * Power[0,4] + a1[1,4] * Power[1,4]
   - b1[0,4] * Power[0,4] - b1[1,4] * Power[1,4] ] <= 4.6
 Power_B_C_constraint: [ b1[0,4] * Power[0,4] + b1[1,4] * Power[1,4]
   - c1[0,4] * Power[0,4] - c1[1,4] * Power[1,4] ] <= 4.6
 Power_C_A_constraint: [ - a1[0,4] * Power[0,4] - a1[1,4] * Power[1,4]
   + c1[0,4] * Power[0,4] + c1[1,4] * Power[1,4] ] <= 4.6
 Power_A_B_constraint: [ a1[0,5] * Power[0,5] + a1[1,5] * Power[1,5]
   - b1[0,5] * Power[0,5] - b1[1,5] * Power[1,5] ] <= 4.6
 Power_B_C_constraint: [ b1[0,5] * Power[0,5] + b1[1,5] * Power[1,5]
   - c1[0,5] * Power[0,5] - c1[1,5] * Power[1,5] ] <= 4.6
 Power_C_A_constraint: [ - a1[0,5] * Power[0,5] - a1[1,5] * Power[1,5]
   + c1[0,5] * Power[0,5] + c1[1,5] * Power[1,5] ] <= 4.6
 Power_A_B_constraint: [ a1[0,6] * Power[0,6] + a1[1,6] * Power[1,6]
   - b1[0,6] * Power[0,6] - b1[1,6] * Power[1,6] ] <= 4.6
 Power_B_C_constraint: [ b1[0,6] * Power[0,6] + b1[1,6] * Power[1,6]
   - c1[0,6] * Power[0,6] - c1[1,6] * Power[1,6] ] <= 4.6
 Power_C_A_constraint: [ - a1[0,6] * Power[0,6] - a1[1,6] * Power[1,6]
   + c1[0,6] * Power[0,6] + c1[1,6] * Power[1,6] ] <= 4.6
 Power_A_B_constraint: [ a1[0,7] * Power[0,7] + a1[1,7] * Power[1,7]
   - b1[0,7] * Power[0,7] - b1[1,7] * Power[1,7] ] <= 4.6
 Power_B_C_constraint: [ b1[0,7] * Power[0,7] + b1[1,7] * Power[1,7]
   - c1[0,7] * Power[0,7] - c1[1,7] * Power[1,7] ] <= 4.6
 Power_C_A_constraint: [ - a1[0,7] * Power[0,7] - a1[1,7] * Power[1,7]
   + c1[0,7] * Power[0,7] + c1[1,7] * Power[1,7] ] <= 4.6
 Power_A_B_constraint: [ a1[0,8] * Power[0,8] + a1[1,8] * Power[1,8]
   - b1[0,8] * Power[0,8] - b1[1,8] * Power[1,8] ] <= 4.6
 Power_B_C_constraint: [ b1[0,8] * Power[0,8] + b1[1,8] * Power[1,8]
   - c1[0,8] * Power[0,8] - c1[1,8] * Power[1,8] ] <= 4.6
 Power_C_A_constraint: [ - a1[0,8] * Power[0,8] - a1[1,8] * Power[1,8]
   + c1[0,8] * Power[0,8] + c1[1,8] * Power[1,8] ] <= 4.6
 Power_A_B_constraint: [ a1[0,9] * Power[0,9] + a1[1,9] * Power[1,9]
   - b1[0,9] * Power[0,9] - b1[1,9] * Power[1,9] ] <= 4.6
 Power_B_C_constraint: [ b1[0,9] * Power[0,9] + b1[1,9] * Power[1,9]
   - c1[0,9] * Power[0,9] - c1[1,9] * Power[1,9] ] <= 4.6
 Power_C_A_constraint: [ - a1[0,9] * Power[0,9] - a1[1,9] * Power[1,9]
   + c1[0,9] * Power[0,9] + c1[1,9] * Power[1,9] ] <= 4.6
Bounds
 -7.2 <= Power[0,0] <= 7.2
 -7.2 <= Power[0,1] <= 7.2
 -7.2 <= Power[0,2] <= 7.2
 -7.2 <= Power[0,3] <= 7.2
 -7.2 <= Power[0,4] <= 7.2
 -7.2 <= Power[0,5] <= 7.2
 -7.2 <= Power[0,6] <= 7.2
 -7.2 <= Power[0,7] <= 7.2
 -7.2 <= Power[0,8] <= 7.2
 -7.2 <= Power[0,9] <= 7.2
 -7.2 <= Power[1,0] <= 7.2
 -7.2 <= Power[1,1] <= 7.2
 -7.2 <= Power[1,2] <= 7.2
 -7.2 <= Power[1,3] <= 7.2
 -7.2 <= Power[1,4] <= 7.2
 -7.2 <= Power[1,5] <= 7.2
 -7.2 <= Power[1,6] <= 7.2
 -7.2 <= Power[1,7] <= 7.2
 -7.2 <= Power[1,8] <= 7.2
 -7.2 <= Power[1,9] <= 7.2
Binaries
 a1[0,0] a1[0,1] a1[0,2] a1[0,3] a1[0,4] a1[0,5] a1[0,6] a1[0,7] a1[0,8]
 a1[0,9] a1[1,0] a1[1,1] a1[1,2] a1[1,3] a1[1,4] a1[1,5] a1[1,6] a1[1,7]
 a1[1,8] a1[1,9] b1[0,0] b1[0,1] b1[0,2] b1[0,3] b1[0,4] b1[0,5] b1[0,6]
 b1[0,7] b1[0,8] b1[0,9] b1[1,0] b1[1,1] b1[1,2] b1[1,3] b1[1,4] b1[1,5]
 b1[1,6] b1[1,7] b1[1,8] b1[1,9] c1[0,0] c1[0,1] c1[0,2] c1[0,3] c1[0,4]
 c1[0,5] c1[0,6] c1[0,7] c1[0,8] c1[0,9] c1[1,0] c1[1,1] c1[1,2] c1[1,3]
 c1[1,4] c1[1,5] c1[1,6] c1[1,7] c1[1,8] c1[1,9]
End
